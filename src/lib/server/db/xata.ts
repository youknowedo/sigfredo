// Generated by Xata Codegen 0.29.4. Please do not edit.
import type { BaseClientOptions, SchemaInference, XataRecord } from '@xata.io/client';
import { buildClient } from '@xata.io/client';

const tables = [
	{
		name: 'user',
		columns: [
			{ name: 'username', type: 'string', unique: true },
			{ name: 'hashed_password', type: 'string' }
		]
	},
	{
		name: 'session',
		columns: [
			{ name: 'expires_at', type: 'datetime' },
			{ name: 'user_id', type: 'string' }
		]
	}
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type User = InferredTypes['user'];
export type UserRecord = User & XataRecord;

export type Session = InferredTypes['session'];
export type SessionRecord = Session & XataRecord;

export type DatabaseSchema = {
	user: UserRecord;
	session: SessionRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
	databaseURL: 'https://Sigfredo-ac2fvu.eu-central-1.xata.sh/db/sigfredo'
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
	constructor(options?: BaseClientOptions) {
		super({ ...defaultOptions, ...options }, tables);
	}
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
	if (instance) return instance;

	instance = new XataClient();
	return instance;
};
